/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2025-01-20 00:16:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.docente;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import controlador.Conexion;
import controlador.DocenteDAO;
import modelo.Notas;
import modelo.Usuario;
import java.sql.Connection;
import java.util.Enumeration;

public final class procesar_005fcalificaciones_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // Verificar si el usuario estÃ¡ en sesiÃ³n
    Usuario usuario = (Usuario) session.getAttribute("usuario");
    if (usuario == null) {
        response.sendRedirect("../index.jsp"); // Redirigir al login si no hay usuario
        return;
    }

    // Inicializar conexiÃ³n a la base de datos
    Conexion conexionDB = new Conexion();
    Connection conexion = conexionDB.conectar();

    if (conexion == null) {
        out.println("<p>Error al conectar con la base de datos.</p>");
        return;
    }

    // Crear una instancia de DocenteDAO
    DocenteDAO docenteDAO = new DocenteDAO(conexion);

    // Obtener los parÃ¡metros del formulario
    Enumeration<String> parametros = request.getParameterNames();

    while (parametros.hasMoreElements()) {
        String nombreParametro = parametros.nextElement();

        // Verificar si el parÃ¡metro es un insumo (insumo1, insumo2, insumo3)
        if (nombreParametro.startsWith("insumo")) {
            // Extraer el id del usuario del nombre del parÃ¡metro
            int idUsuario = Integer.parseInt(nombreParametro.split("_")[1]);

            // Obtener los valores de los insumos
            double insumo1 = Double.parseDouble(request.getParameter("insumo1_" + idUsuario));
            double insumo2 = Double.parseDouble(request.getParameter("insumo2_" + idUsuario));
            double insumo3 = Double.parseDouble(request.getParameter("insumo3_" + idUsuario));

            // Verificar si la nota ya existe (para decidir si insertar o actualizar)
            boolean existeNota = docenteDAO.existeNota(idUsuario, 1); // MÃ©todo que debes implementar en DocenteDAO

            if (existeNota) {
                // Obtener el id_nota de la nota existente
                int idNota = docenteDAO.obtenerIdNota(idUsuario, 1); // MÃ©todo que debes implementar en DocenteDAO

                // Crear un objeto Notas con el id_nota
                Notas nota = new Notas();
                nota.setIdNota(idNota); // Asignar el id_nota
                nota.setIdUsuario(idUsuario);
                nota.setIdCurso(1); // AquÃ­ debes poner el id del curso adecuado
                nota.setInsumo1(insumo1);
                nota.setInsumo2(insumo2);
                nota.setInsumo3(insumo3);

                // Actualizar la nota existente
                docenteDAO.actualizarNota(nota);
            } else {
                // Crear un objeto Notas sin id_nota (para inserciÃ³n)
                Notas nota = new Notas();
                nota.setIdUsuario(idUsuario);
                nota.setIdCurso(1); // AquÃ­ debes poner el id del curso adecuado
                nota.setInsumo1(insumo1);
                nota.setInsumo2(insumo2);
                nota.setInsumo3(insumo3);

                // Insertar una nueva nota
                docenteDAO.agregarNota(nota);
            }
        }
    }

    // Redirigir a una pÃ¡gina de confirmaciÃ³n o de vuelta al formulario
    response.sendRedirect("calificar.jsp?mensaje=Calificaciones guardadas correctamente");

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
