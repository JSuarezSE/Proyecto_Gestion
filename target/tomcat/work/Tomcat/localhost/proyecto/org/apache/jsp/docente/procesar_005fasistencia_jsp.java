/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2025-01-19 00:25:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.docente;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import controlador.Conexion;
import controlador.DocenteDAO;
import modelo.Asistencia;
import modelo.Usuario;
import java.sql.Connection;
import java.util.Map;
import java.util.HashMap;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Date;
import java.text.SimpleDateFormat;

public final class procesar_005fasistencia_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // Verificar si el usuario estÃ¡ en sesiÃ³n
    Usuario usuario = (Usuario) session.getAttribute("usuario");
    if (usuario == null) {
        response.sendRedirect("../index.jsp"); // Redirigir al login si no hay usuario
        return;
    }

    // Obtener los valores del formulario
    Map<Integer, String> asistencia = new HashMap<Integer, String>(); // Cambiado para compatibilidad con Java 6
    String fechaAsistencia = request.getParameter("fecha_asistencia");

    // Validar que la fecha no sea nula o vacÃ­a
    if (fechaAsistencia == null || fechaAsistencia.trim().isEmpty()) {
        response.sendRedirect("asistencia.jsp?mensaje=La fecha de asistencia es obligatoria");
        return;
    }

    // Convertir la fecha a formato SQL
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date fecha = null;
    try {
        fecha = new Date(dateFormat.parse(fechaAsistencia).getTime());
    } catch (Exception e) {
        response.sendRedirect("asistencia.jsp?mensaje=Error al procesar la fecha: " + e.getMessage());
        return;
    }

    // Inicializar conexiÃ³n a la base de datos
    Conexion conexionDB = new Conexion();
    Connection conexion = conexionDB.conectar();
    if (conexion != null) {
        DocenteDAO docenteDAO = new DocenteDAO(conexion);

        // Obtener el id del curso (esto puede venir del docente o de una variable de sesiÃ³n)
        int idCurso = 1; // Este debe ser el id del curso correspondiente

        // Registrar asistencia para cada estudiante
        for (String key : request.getParameterMap().keySet()) {
            if (key.startsWith("estado_")) {
                // El nombre del parÃ¡metro es "estado_<id_usuario>"
                int idEstudiante = Integer.parseInt(key.substring(7)); // Extraer el id del estudiante
                String estado = request.getParameter(key);
                asistencia.put(idEstudiante, estado);
            }
        }

        for (Map.Entry<Integer, String> entry : asistencia.entrySet()) {
            int idEstudiante = entry.getKey();
            String estado = entry.getValue();

            // Crear un objeto Asistencia para cada estudiante
            Asistencia nuevaAsistencia = new Asistencia(idEstudiante, idCurso, fecha, estado);

            // Registrar la asistencia en la base de datos
            String sql = "INSERT INTO asistencias (id_usuario, id_curso, fecha, estado) VALUES (?, ?, ?, ?)";
            try {
                PreparedStatement ps = conexion.prepareStatement(sql);
                ps.setInt(1, nuevaAsistencia.getIdUsuario());
                ps.setInt(2, nuevaAsistencia.getIdCurso());
                ps.setDate(3, nuevaAsistencia.getFecha());
                ps.setString(4, nuevaAsistencia.getEstado());
                ps.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
                response.sendRedirect("asistencia.jsp?mensaje=Error al registrar la asistencia: " + e.getMessage());
                return;
            }
        }

        // Redirigir a asistencia.jsp con un mensaje de Ã©xito
      out.println("<script>alert('Asistencia guardada correctamente.'); window.location.href='asistencia.jsp';</script>");
    } else {
        out.println("<script>alert('Error al conectar con la base de datos.'); window.location.href='asistencia.jsp';</script>");
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
